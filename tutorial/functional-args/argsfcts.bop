#define MyOR "Or"
#define N 4

Secret<What>(a) = s
where
  s = Id(What(a));
end where;

FoldLeft[N]<Fun, WMap, Base>(a:[N]) = s
where
  if N == 1 then
    // Using functional arguments here. The argument WMap itself expects a
    // functional argument.
    s = WMap[1]<Base>(a[0]);
  else
    // Showing an example of quoted functional arguments.
    s = Fun(FoldLeft[N - 1]<Fun, WMap, "%{Base}">(a:[N - 1]), a[N - 1]);
  end if;
end where;

Map[N]<What>(a:[N]) = s:[N]
where
  for i = 0 to N - 1
    s[i] = Secret<What>(a[i]);
  end for;
end where;

// Some examples taken from <stdlib.bop>
And[N](a:[N]) = s
where
  // map est d√©finie avant
  s = FoldLeft[N]<"And", "Map", "Id">(a:[N]);
end where;

Or[N](a:[N]) = s
where
  s = FoldLeft[N]<"%{MyOR}", "Map", "Id">(a:[N]);
end where;

[ Main ]
Main(a:[N]) = (u, v)
where
  u = And[N](a:[N]);
  v = Or[N](a:[N]);
end where;
