/**
 * A digital watch that drives a 7-segment display, in Bopkit. This circuit
 * was originally implemented by Mathieu Barbin & Ocan Sankur in 2007.
 */
/**
 * There is no need to simulate this circuit at great frequency, but the
 * circuit needs to know the number of cycles per second, so it can increment the
 * seconds on the watch at the right frequency. For things to work, we need a power
 * of 2 number of cycles per seconds. In the demo with the watch only, we use 2
 * cycles per seconds. With the bopboard, for the user interaction to feel fluid
 * enough, we increase it to 16.
 */
#define CYCLES_PER_SECOND 2 ^ 1

/**
 * To produce the bits code to send to the 7-segment display, we use a ROM that
 * contains them. Since there are 10 codes, we need 4 bits of address.
 */
ROM Dec7 (4, 7) = text {

  // Zero   One    Two     Three   Four
  1011111 0000110 0111011 0101111 1100110

  // Five   Six    Seven   Eight   Nine
  1101101 1111101 0000111 1111111 1101111

  // The remaining 6 words are set to [false] since they are
  // not specified here.
}

/**
 * For the counter modulo 24 we also uses a ROM memory. With it we can extract
 * the remainder of the division modulo 10.
 */
ROM C24 (5, 8) = text {

  0000|0000  0000|0001  0000|0010  0000|0011  0000|0100
  0000|0101  0000|0110  0000|0111  0000|1000  0000|1001

  0001|0000  0001|0001  0001|0010  0001|0011  0001|0100
  0001|0101  0001|0110  0001|0111  0001|1000  0001|1001

  0010|0000  0010|0001  0010|0010  0010|0011  0010|0100
}

[ VlogTestBench ]
Adder(i, rst) = (s, r)
where
  s = Z(mux(rst, gnd(), xor(s, i)));
  r = and(s, i);
end where;

CM10(i) = (s:[4], rst)
with unused = c[4]
where
  // (rst == 1) <=> ((i == 1) && (s[0..3] == 9))
  rst = and(i, and(and(s[3], not(s[2])), and(not(s[1]), s[0])));
  for i = 0 to 3
    s[i], c[4 - i] = Adder(c[3 - i], rst);
  end for;
  c[0] = id(i);
end where;

CM6(i) = (s[0..3], rst)
with unused = c[3]
where
  // (rst == 1) <=> ((i == 1) && (s == 5))
  rst = and(and(i, s[1]), and(not(s[2]), s[3]));
  for i = 1 to 3
    s[i], c[4 - i] = Adder(c[3 - i], rst);
  end for;
  c[0] = id(i);
  s[0] = gnd();
end where;

CM60(i) = (su:[4], sd:[4], o)
where
  su:[4], ou = CM10(i);
  sd:[4], o = CM6(ou);
end where;

C24(i) = (t:[5], o)
with unused = c[5]
where
  o = and(and(and(t[0], t[2]), and(t[3], t[4])), and(not(t[1]), i));
  for i = 0 to 4
    t[i], c[5 - i] = Adder(c[4 - i], o);
  end for;
  c[0] = id(i);
end where;

/**
 * Dividing the clock by (2 pow P). This is to produce a clock that marks the
 * seconds.
 */
CM2[P](i) = sec
with unused = a[1..P]
where
  g = gnd();
  c[0] = id(i);
  sec = id(c[P]);
  for i = 1 to P
    a[i], c[i] = Adder(c[i - 1], g);
  end for;
end where;

/**
 * An incrementable watch. The input bits can increase the time manually,
 * otherwise it increases its internal counter as it follows the time of day. This
 * returns the 42 bits expected by the external display with the 7-segments.
 */
IncrementableWatch(incrS, incrM, incrH) = (h10:[7], h1:[7], m10:[7], m1:[7],
  s10:[7], s1:[7])
with unused = tick
where
  s1:[7] = rom_Dec7(su:[-4]);
  s10:[7] = rom_Dec7(sd:[-4]);
  m1:[7] = rom_Dec7(mu:[-4]);
  m10:[7] = rom_Dec7(md:[-4]);
  h1:[7] = rom_Dec7(hu:[-4]);
  h10:[7] = rom_Dec7(hd:[-4]);
  i = clock();
  sec = CM2[log CYCLES_PER_SECOND](i);
  su:[4], sd:[4], mn = CM60(or(incrS, sec));
  mu:[4], md:[4], hr = CM60(or(incrM, mn));
  t:[5], _ = C24(or(incrH, hr));
  hd:[4], hu:[4] = rom_C24(t:[-5]);
end where;

/**
 * In this version of the watch, we cannot increment the time (input bits set
 * to [gnd]). The input tick allows to regulate the frequency of the C and Verilog
 * simulation.
 */
[ Main ]
Watch(tick) = out:[42]
with unused = tick
where
  out:[42] = IncrementableWatch(gnd(), gnd(), gnd());
end where;
